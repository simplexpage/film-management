basePath: /api/v1
definitions:
  endpoints.AddFilmRequest:
    properties:
      casts:
        example:
        - John Doe
        - Jane Doe
        - Foo Bar
        - Baz Quux
        items:
          type: string
        maxItems: 10
        minItems: 1
        type: array
      director:
        example: John Doe
        maxLength: 40
        minLength: 3
        type: string
      genres:
        example:
        - action
        - adventure
        - sci-fi
        items:
          type: string
        maxItems: 5
        minItems: 1
        type: array
      releaseDate:
        example: "2021-01-01"
        type: string
      synopsis:
        example: This is a synopsis.
        maxLength: 1000
        minLength: 10
        type: string
      title:
        example: Garry Potter
        maxLength: 100
        minLength: 3
        type: string
    required:
    - casts
    - director
    - genres
    - releaseDate
    - synopsis
    - title
    type: object
  endpoints.AddFilmResponse:
    properties:
      item:
        $ref: '#/definitions/endpoints.ItemFilm'
    type: object
  endpoints.DeleteFilmResponse:
    type: object
  endpoints.ItemAllFilms:
    properties:
      casts:
        example:
        - John Doe
        - Jane Doe
        - Foo Bar
        items:
          type: string
        type: array
      created_at:
        example: "2021-01-01 00:00:00"
        type: string
      director:
        example: John Doe
        type: string
      genres:
        example:
        - action
        - adventure
        - sci-fi
        items:
          type: string
        type: array
      release_date:
        example: "2021-01-01"
        type: string
      synopsis:
        example: This is a synopsis.
        type: string
      title:
        example: Garry Potter
        type: string
      updated_at:
        example: "2021-01-01 00:00:00"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  endpoints.ItemCreator:
    properties:
      username:
        example: test
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  endpoints.ItemFilm:
    properties:
      casts:
        example:
        - John Doe
        - Jane Doe
        - Foo Bar
        - Baz Quux
        items:
          type: string
        type: array
      created_at:
        example: "2021-01-01 00:00:00"
        type: string
      director:
        example: John Doe
        type: string
      genres:
        example:
        - action
        - adventure
        - sci-fi
        items:
          type: string
        type: array
      release_date:
        example: "2021-01-01"
        type: string
      synopsis:
        example: This is a synopsis.
        type: string
      title:
        example: Garry Potter
        type: string
      updated_at:
        example: "2021-01-01 00:00:00"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  endpoints.ItemViewFilm:
    properties:
      casts:
        example:
        - Tim Robbins
        - Morgan Freeman
        items:
          type: string
        type: array
      created_at:
        example: "2021-01-01 00:00:00"
        type: string
      creator:
        $ref: '#/definitions/endpoints.ItemCreator'
      director:
        example: Frank Darabont
        type: string
      genres:
        example:
        - drama
        - crime
        items:
          type: string
        type: array
      release_date:
        example: "1994-09-23"
        type: string
      synopsis:
        example: This is a synopsis.
        type: string
      title:
        example: The Shawshank Redemption
        type: string
      updated_at:
        example: "2021-01-01 00:00:00"
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  endpoints.LoginRequest:
    properties:
      password:
        example: "12345678"
        maxLength: 30
        minLength: 8
        type: string
      username:
        example: test123
        maxLength: 40
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  endpoints.LoginResponse:
    properties:
      auth_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIj
        type: string
      expired_at:
        example: "2023-11-09T15:21:15.973955426Z"
        type: string
    type: object
  endpoints.RegisterRequest:
    properties:
      password:
        example: "12345678"
        maxLength: 30
        minLength: 8
        type: string
      username:
        example: test123
        maxLength: 40
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  endpoints.RegisterResponse:
    properties:
      username:
        example: test123
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  endpoints.UpdateFilmRequest:
    properties:
      casts:
        example:
        - John Doe
        - ' Jane Doe'
        - ' Foo Bar'
        - ' Baz Quux'
        items:
          type: string
        maxItems: 10
        minItems: 1
        type: array
      director:
        example: John Doe
        maxLength: 40
        minLength: 3
        type: string
      genres:
        example:
        - action
        - adventure
        - sci-fi
        items:
          type: string
        maxItems: 5
        minItems: 1
        type: array
      releaseDate:
        example: "2021-01-01"
        type: string
      synopsis:
        example: This is a synopsis.
        maxLength: 1000
        minLength: 10
        type: string
      title:
        example: Garry Potter
        maxLength: 100
        minLength: 3
        type: string
    required:
    - casts
    - director
    - genres
    - releaseDate
    - synopsis
    - title
    type: object
  endpoints.UpdateFilmResponse:
    properties:
      item:
        $ref: '#/definitions/endpoints.ItemFilm'
    type: object
  endpoints.ViewAllFilmsResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/endpoints.ItemAllFilms'
        type: array
      pagination:
        $ref: '#/definitions/pagination.Pagination'
    type: object
  endpoints.ViewFilmResponse:
    properties:
      item:
        $ref: '#/definitions/endpoints.ItemViewFilm'
    type: object
  http.HealthCheckResponse:
    properties:
      alive:
        example: true
        type: boolean
    type: object
  pagination.Pagination:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total_count:
        example: 200
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  response.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
    type: object
  response.ErrorResponseValidation:
    properties:
      code:
        example: 421
        type: integer
      data:
        additionalProperties:
          type: string
        type: object
      message:
        example: Validation Error
        type: string
    type: object
  response.SuccessResponse:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: OK
        type: string
    type: object
info:
  contact: {}
  description: This is a film management service.
  title: Film management service API
  version: "1.0"
paths:
  /films:
    get:
      consumes:
      - application/json
      description: View all films
      parameters:
      - description: title
        example: Star Wars
        in: query
        name: title
        type: string
      - description: date
        example: 2023-12-11 or 2023-10-11:2023-12-11
        in: query
        name: release_date
        type: string
      - description: genres
        example: action,adventure
        in: query
        name: genres
        type: string
      - description: sort
        example: title.asc or title.desc or release_date.asc or release_date.desc
        in: query
        name: sort
        type: string
      - description: limit
        example: "10"
        in: query
        name: limit
        type: string
      - description: offset
        example: "1"
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.ViewAllFilmsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: View all films
      tags:
      - Film
  /films/:
    post:
      consumes:
      - application/json
      description: Add a film
      parameters:
      - description: Add Film Form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/endpoints.AddFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.AddFilmResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add a film
      tags:
      - Film
  /films/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a film
      parameters:
      - description: Film UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.DeleteFilmResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a film
      tags:
      - Film
    get:
      consumes:
      - application/json
      description: View a film
      parameters:
      - description: Film UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.ViewFilmResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: View a film
      tags:
      - Film
    put:
      consumes:
      - application/json
      description: Update a film
      parameters:
      - description: Film UUID
        in: path
        name: id
        required: true
        type: string
      - description: Update film form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/endpoints.UpdateFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.UpdateFilmResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a film
      tags:
      - Film
  /health:
    get:
      consumes:
      - application/json
      description: Health Check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.HealthCheckResponse'
      summary: Health Check
      tags:
      - Common
  /user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/endpoints.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Registration
      parameters:
      - description: Register form
        in: body
        name: form
        required: true
        schema:
          $ref: '#/definitions/endpoints.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/endpoints.RegisterResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "422":
          description: Data Validation Failed
          schema:
            $ref: '#/definitions/response.ErrorResponseValidation'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Registration
      tags:
      - User
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
